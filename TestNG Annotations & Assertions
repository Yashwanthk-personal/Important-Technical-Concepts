TestNG Annotations :-
TestNG uses annotations to define & control the flow of test methods and allow you to define the order in which your methods execute. Annotations allows you to 
customize the behavior of your test cases, set up preconditions, manage resources, and define data sources for your test methods. You can use them to create 
well-organized, controlled and well-documented test suites using TestNG. Some of the commonly used TestNG annotations are.....

ðŸ‘‰ @Test :- Marks a method as a test method. Test methods are the actual test cases you want to execute.

ðŸ‘‰ @BeforeSuite :- Indicates that a method should run before all test within a test suit XML file.

ðŸ‘‰ @AfterSuite :- Specifies that a method should run after all test suites within a test suit XML file.

ðŸ‘‰ @BeforeTest :- Denotes a method that should run before all test methods belonging to a <test> tag in the test suite XML.

ðŸ‘‰ @AfterTest :- Indicates that a method should run after all test methods belonging to a <test> tag in the test suite XML.

ðŸ‘‰ @BeforeClass :- Marks a method to run once before any test methods in the same class. Useful for setting up class-level resources.

ðŸ‘‰ @AfterClass :- Specifies that a method should run once after all test methods in the same class. Useful for performing cleanup or finalization task for 
class-level resources.

ðŸ‘‰ @BeforeMethod :- Denotes a method that should run before each test method within the class. Useful for setting up common preconditions for multiple test methods.

ðŸ‘‰ @AfterMethod :- Specifies that a method should run after each test method within the class. Useful for performing cleanup or resetting state between test methods.

ðŸ‘‰ @DataProvider :- Supplies data to test methods.
âž¡ Example :
@DataProvider
public Object[][] testData() {
// provide test data as two dimentional array.
}

ðŸ‘‰ @Parameters :- Provides parameters to test methods from the test suite XML.
âž¡Example :
@Parameters({"username", "password"})
@Test
public void loginTest(String username, String password) {
//Test logic using the provided parametes.
}

ðŸ‘‰ @Factory :- Used to create instances of test classes. Useful for creating multiple instances of a test class with different configurations.
âž¡Example :
@Factory
public Object[] createInstances(){
//create and return instance of test class
}

ðŸ‘‰ @Listeners :- Specifies listeners to be used with the test class. Listeners can monitor and report events during test execution.
âž¡Example:
@Listners(MyTestListeners.class)
public class MyTestClass {
//Test methods and annotations
}

To be Continued.. to topic TestNG Assertions 

ðŸŽ¯ When to use Hard & Soft Assertion?

ðŸ”° Use Hard Assertion :- Scenario would be like login test scenario where if the login test fails, the test case execution must be terminated with an exception as 
there is no point of moving further without logging into the system.
 
ðŸ”° Use Soft Assertion :- Soft Assertion is best used in case where the test statements of a test case are not dependent on each other. E.g. if you are validating a 
form in which there are multiple fields to be validated, hence it is recommended to soft assert all the fields and then call assertAll() to throw all exceptions at 
the end of the test case. 

âœ´ TestNG Assert Methods :- Most commonly used assertions in testing framework is like mentioned below..

ðŸ‘‰ Assert.assertEqual (String actual, String expected) :- It accepts 2 parameters i.e. the actual value & expected value to validate if the actual string is equal to 
the expected string. The exception is thrown if both the strings are not equal.
 
ðŸ‘‰ Assert.assertEqual (String actual, String excepted, String message) :- This is similar to the assertion method mentioned above, the only difference is that this 
method can accept one more string parameter as a message. In case assertion condition not met, the exception thrown along with error message passed here.
 
ðŸ‘‰ Assert.assertEquals (boolean actual, boolean expected ) :- This assertion method accepts two boolean values and validates if both are equal or not.

ðŸ‘‰ Assert.assertTrue (condition) :- This assertion method is used to assert whether the condition passed in a parameter returns true or not. If the condition returns 
false, the assertion error is thrown. 

ðŸ‘‰ Assert.assertTrue (condition, message ) :- It is similar to assertion method discussed in the previous one, the only difference is that here this method accepts one 
more parameter as a message. In case the assert condition is passed as false, the assertion error is thrown along with a message passed here.

ðŸ‘‰ Assert.assertFalse (condition) :- This assertion method is used to assert whether the condition passed in a parameter returns false or not. If the condition returns 
true, the assertion error is thrown.
 
ðŸ‘‰ Assert.assertFalse (condition, message) :- It is similar to previous one only difference is that this method can accept one more string parameter as message. In case the assertion condition is passed as true, the assertion error is thrown along with a message passed here.

ðŸ‘‰ Assert.assertNull (condition) :- This assertion method is used to assert whether the condition passed in a parameter returns null or not. If the condition doesn't return null, the assertion error is thrown. 

ðŸ‘‰Assert.assertNotNull (condition) :- This assertion method is used to assert whether the condition passed in a parameter returns value except null or not. If the condition returns null, the assertion error is thrown.
